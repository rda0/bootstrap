#!/bin/bash

print_usage() {
  echo -e "Usage: ${0} name pool dist release [options]"
  echo -e "\n    Bootstraps a bootable filesystem to logical volume or file-based image."
  echo -e "    Default bootloader: extlinux"
  echo -e "\nOptions:\n"
  echo "    name"
  echo "        Name of the lv or file to be created (\`-root\` or \`-boot\` will be appended)"
  echo "    pool"
  echo "        Volume group name or file-based image base-path (when \`--file\` is used)"
  echo "    dist"
  echo "        Distribution name (example: \`debian\`, \`ubuntu\`)"
  echo "    release"
  echo "        Release name (example \`stable\`, \`stretch\`, etc)"
  echo "    -r, --root <size>"
  echo "        Size of root fs image (default: \`2G\`)"
  echo "    -b, --boot <size>"
  echo "        Enable boot disk (and grub), size of boot disk (example: \`512M\`)"
  echo "    -t, --fs-type <type>"
  echo "        File system type (default: \`ext4\`)"
  echo "    --boot-fs-type <type>"
  echo "        Boot disk file system type (defaults to the value of \`--fs-type\`)"
  echo "    -o, --fs-options <options>"
  echo "        Options passed to \`mkfs.<fs-type>\` (default: use system defaults)"
  echo "    -i, --package-install <package_list>"
  echo "        List of extra packages to install (default: bootstrap-packages/<dist>/<release>/install)"
  echo "    -u, --package-purge <package_list>"
  echo "        List of packages to purge (default: bootstrap-packages/<dist>/<release>/purge)"
  echo "    -n, --network-interface <interface_name>"
  echo "        Network interface name (default: \`eth0\`)"
  echo "    -m, --mirror <mirror_url>"
  echo "        Mirror to use (default: \`http://debian.ethz.ch\`)"
  echo "    -a, --mount-target <path>"
  echo "        Target mount point (default: \`/mnt/bootstrap\`)"
  echo "    -y, --yes"
  echo "        Run non-interactively and answer questions with yes"
  echo "    -c, --cdebootstrap"
  echo "        Use cdebootstrap instead of debootstrap"
  echo "    -f, --file"
  echo "        Bootstrap to file-based image"
  echo "    -h, --help"
  echo "        Print this help message"
}

print_error_pool_not_vg() {
  echo -e "error: invalid value for pool. volume group name expected (no slash)"
  echo -e "\n    see \`${0} --help\`\n"
}

print_requirement_debootstrap() {
  echo -e "error: debootstrap is not installed. To install run:"
  echo -e "\n    apt install debootstrap\n"
}

print_requirement_cdebootstrap() {
  echo -e "error: cdebootstrap is not installed. To install run:"
  echo -e "\n    apt install cdebootstrap ubuntu-archive-keyring\n"
}

print_requirement_part() {
  echo -e "error: parted or kpartx is not installed. To install run:"
  echo -e "\n    apt install parted kpartx\n"
}

print_requirement_fallocate() {
  echo -e "error: fallocate is not installed. To install run:"
  echo -e "\n    apt install util-linux\n"
}

if [ "$#" -lt 4 ]; then
  print_usage
  exit 1
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

export NAME="${1}"
shift
export POOL="${1}"
shift
export DIST="${1}"
shift
export RELEASE="${1}"
shift
export SCRIPT_PATH="${DIR}"
export PACKAGE_PATH="${SCRIPT_PATH}/packages"
export CONFIG_PATH="${SCRIPT_PATH}/config"
export DEBOOTSTRAP_EXCLUDE="--exclude=editor,debconf-2.0"

IMG_ROOT_SIZE="2G"
IMG_BOOT_SIZE=""
IF="eth0"
FS_ROOT="ext4"
FS_BOOT="ext4"
FS_OPTIONS=""
YES="false"
FILE="false"
LVCREATE_OPTS="--zero y --wipesignatures y"
MIRROR="http://debian.ethz.ch"
MOUNT_TARGET="/mnt/bootstrap"

if [ "${RELEASE}" == "jessie" ]; then
    FS_ROOT="ext3"
    FS_BOOT="ext3"
fi

if [ "${RELEASE}" == "xenial" ]; then
    FS_OPTIONS="-O has_journal,ext_attr,resize_inode,dir_index,filetype,extent,flex_bg,sparse_super,large_file,huge_file,uninit_bg,dir_nlink,extra_isize,^64bit,^metadata_csum"
fi

if [ -s "${PACKAGE_PATH}/${DIST}/${RELEASE}/required" ]
then
    PACKAGE_REQUIRED="$(<${PACKAGE_PATH}/${DIST}/${RELEASE}/required)"
else
    PACKAGE_REQUIRED=""
fi

if [ -s "${PACKAGE_PATH}/${DIST}/${RELEASE}/important" ]
then
    PACKAGE_IMPORTANT="$(<${PACKAGE_PATH}/${DIST}/${RELEASE}/important)"
else
    PACKAGE_IMPORTANT=""
fi

if [ -s "${PACKAGE_PATH}/${DIST}/${RELEASE}/standard" ]
then
    PACKAGE_STANDARD="$(<${PACKAGE_PATH}/${DIST}/${RELEASE}/standard)"
else
    PACKAGE_STANDARD=""
fi

if [ -s "${PACKAGE_PATH}/${DIST}/${RELEASE}/install" ]
then
    PACKAGE_INSTALL="$(<${PACKAGE_PATH}/${DIST}/${RELEASE}/install)"
else
    PACKAGE_INSTALL=""
fi

if [ -s "${PACKAGE_PATH}/${DIST}/${RELEASE}/purge" ]
then
    PACKAGE_PURGE="$(<${PACKAGE_PATH}/${DIST}/${RELEASE}/purge)"
else
    PACKAGE_PURGE=""
fi

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
        print_usage
        exit 0
        ;;
    -y|--yes)
        YES="true"
        ;;
    -c|--cdebootstrap)
        CDEBOOTSTRAP="true"
        ;;
    -f|--file)
        FILE="true"
        ;;
    -r|--root)
        IMG_ROOT_SIZE="${2}"
        shift
        ;;
    -b|--boot)
        IMG_BOOT_SIZE="${2}"
        shift
        ;;
    -t|--fs-type)
        FS_ROOT="${2}"
        FS_BOOT="${2}"
        shift
        ;;
    --boot-fs-type)
        FS_BOOT="${2}"
        shift
        ;;
    -o|--fs-options)
        FS_OPTIONS="${2}"
        shift
        ;;
    -p|--package-priorities)
        PACKAGE_PRIO="${2}"
        shift
        ;;
    -i|--package-install)
        PACKAGE_INSTALL="${2}"
        shift
        ;;
    -u|--package-purge)
        PACKAGE_PURGE="${2}"
        shift
        ;;
    -n|--network-interface)
        IF="${2}"
        shift
        ;;
    -m|--mirror)
        MIRROR="${2}"
        shift
        ;;
    -a|--mount-target)
        MOUNT_TARGET="${2}"
        shift
        ;;
esac
shift # past argument or value
done

export IMG_ROOT="${NAME}-root"
export IMG_BOOT="${NAME}-boot"

if [[ ! "${FILE}" == "true" ]]; then
  export DEV_ROOT="/dev/${POOL}/${IMG_ROOT}"
  export DEV_BOOT="/dev/${POOL}/${IMG_BOOT}"
else
  export DEV_ROOT="${POOL}/${IMG_ROOT}"
  export DEV_BOOT="${POOL}/${IMG_BOOT}"
fi

if [[ ! "${FILE}" == "true" ]] && [[ ${POOL} == *"/"* ]]; then
  print_error_pool_not_vg
  exit 1
fi

if [ "$(which debootstrap)" == "" ]; then
  print_requirement_debootstrap
  exit 1
fi

if [[ "${CDEBOOTSTRAP}" == "true" ]] && [ "$(which cdebootstrap)" == "" ]; then
  print_requirement_cdebootstrap
  exit 1
fi

if [[ "${FILE}" == "true" ]] && [ "$(which fallocate)" == "" ]; then
  print_requirement_fallocate
  exit 1
fi

if [[ "${YES}" == "true" ]]; then
  LVCREATE_OPTS="${LVCREATE_OPTS} --yes"
fi

export IMG_ROOT_SIZE
export IMG_BOOT_SIZE
export FS_ROOT
export FS_BOOT
export PACKAGE_REQUIRED
export PACKAGE_IMPORTANT
export PACKAGE_STANDARD
export PACKAGE_INSTALL
export PACKAGE_PURGE
export IF
export MIRROR
export MOUNT_TARGET
export FILE

# try to load root password hash
if [ -r "${SCRIPT_PATH}/secrets/root_password_hash" ]; then
    . "${SCRIPT_PATH}/secrets/root_password_hash"
fi

# if the root password is undefined, set it to `toor`
if [ -z "${ROOT_PASSWORD_HASH}" ]; then
    ROOT_PASSWORD_HASH='$6$BiHI2LMs$B/L0VkdgRuo/ZTXCpmgA4a9rLXxqVG7R.F6/3L93kKdOPmm8C9nT5VJ/8LL7MxykhqJkGZpOHi8z47m1RAt231'
fi

export ROOT_PASSWORD_HASH

if [ -e ${DEV_ROOT} ]; then
  echo "error: ${DEV_ROOT} already exists!"
  exit 1
fi

if [ ! -z "${IMG_BOOT_SIZE}" ]; then
  if [ -e ${DEV_BOOT} ]; then
    echo "error: ${DEV_BOOT} already exists!"
    exit 1
  fi

  if [ "$(which parted)" == "" ]; then
    print_requirement_part
    exit 1
  fi

  if [ "$(which kpartx)" == "" ]; then
    print_requirement_part
    exit 1
  fi
fi

if [ -e ${MOUNT_TARGET} ]; then
  echo "error: ${MOUNT_TARGET} already exists!"
  exit 1
fi

echo "name: ${NAME}"
echo "pool: ${POOL}"
echo "root disk: ${DEV_ROOT}"
echo "root size: ${IMG_ROOT_SIZE}"
if [[ ! -z "${IMG_BOOT_SIZE}" ]]; then
  echo "boot disk: ${DEV_BOOT}"
  echo "boot size: ${IMG_BOOT_SIZE}"
fi
echo

bootstrap_stage1() {
  if [[ ! "${CDEBOOTSTRAP}" == "true" ]]; then
    debootstrap "${DEBOOTSTRAP_EXCLUDE}" "${RELEASE}" "${MOUNT_TARGET}" "${MIRROR}/${DIST}/" || exit 1
  else
    cdebootstrap "${DEBOOTSTRAP_EXCLUDE}" "${DIST}/${RELEASE}" "${MOUNT_TARGET}" "${MIRROR}/${DIST}/" || exit 1
  fi
}

if [[ ! "${YES}" == "true" ]]; then
  read -p "Are you sure? [y/N]" -n 1 -r
fi

if [[ "${YES}" == "true" ]] || [[ $REPLY =~ ^[Yy]$ ]]
then
  if [[ ! "${FILE}" == "true" ]]; then
    echo "bootstrapping to logical volume..."

    lvcreate ${LVCREATE_OPTS} -L ${IMG_ROOT_SIZE} -n ${IMG_ROOT} ${POOL} || exit 1
    mkfs.${FS_ROOT} ${FS_OPTIONS} ${DEV_ROOT} || exit 1

    if [ ! -z "${IMG_BOOT_SIZE}" ]; then
      lvcreate ${LVCREATE_OPTS} -L ${IMG_BOOT_SIZE} -n ${IMG_BOOT} ${POOL} || exit 1
      parted ${DEV_BOOT} mklabel msdos || exit 1
      parted ${DEV_BOOT} mkpart primary ${FS_BOOT} 1M 100% || exit 1
      parted ${DEV_BOOT} set 1 boot on || exit 1
      kpartx -av ${DEV_BOOT} || exit 1
      export MAPPER_BOOT="/dev/mapper/${POOL}-${NAME//-/--}--boot"
      export MAPPER_BOOT1="${MAPPER_BOOT}1"
      mkfs.${FS_BOOT} ${MAPPER_BOOT1} || exit 1
    fi

    mkdir -p ${MOUNT_TARGET} || exit 1
    mount ${DEV_ROOT} ${MOUNT_TARGET} || exit 1
    export MAPPER_ROOT="/dev/mapper/${POOL}-${NAME//-/--}--root"

    bootstrap_stage1

    if [[ ! -z "${IMG_BOOT_SIZE}" ]]; then
      mount ${MAPPER_BOOT1} "${MOUNT_TARGET}/boot" || exit 1
    fi
  else
    echo "bootstrapping to file image..."

    mkdir -p ${POOL} || exit 1
    fallocate -l ${IMG_ROOT_SIZE} ${DEV_ROOT} || exit 1
    mkfs.${FS_ROOT} ${FS_OPTIONS} ${DEV_ROOT} || exit 1

    if [ ! -z "${IMG_BOOT_SIZE}" ]; then
      fallocate -l ${IMG_BOOT_SIZE} ${DEV_BOOT} || exit 1
      parted ${DEV_BOOT} mklabel msdos || exit 1
      parted ${DEV_BOOT} mkpart primary ${FS_BOOT} 1M 100% || exit 1
      parted ${DEV_BOOT} set 1 boot on || exit 1
      kpartx -av ${DEV_BOOT} || exit 1
      export MAPPER_BOOT="$(losetup --list | grep ${DEV_BOOT} | cut -d ' ' -f1)"
      export MAPPER_BOOT1="${MAPPER_BOOT/\/dev\//\/dev\/mapper\/}p1"
      mkfs.${FS_BOOT} ${MAPPER_BOOT1} || exit 1
    fi

    mkdir -p ${MOUNT_TARGET} || exit 1
    mount ${DEV_ROOT} ${MOUNT_TARGET} || exit 1
    export MAPPER_ROOT="$(losetup --list | grep ${DEV_ROOT} | cut -d ' ' -f1)"

    bootstrap_stage1

    if [[ ! -z "${IMG_BOOT_SIZE}" ]]; then
      mount ${MAPPER_BOOT1} "${MOUNT_TARGET}/boot" || exit 1
    fi
  fi

  mount --bind /dev "${MOUNT_TARGET}/dev"
  #mount --bind /dev/pts "${MOUNT_TARGET}/dev/pts"
  mount -t proc proc "${MOUNT_TARGET}/proc"
  mount -t sysfs sysfs "${MOUNT_TARGET}/sys"

  \cp -p "${SCRIPT_PATH}/stage2" ${MOUNT_TARGET}
  chmod +x "${MOUNT_TARGET}/stage2"
  LANG=C.UTF-8 chroot ${MOUNT_TARGET} /bin/bash /stage2 || exit 1
  rm "${MOUNT_TARGET}/stage2"

  . "${SCRIPT_PATH}/stage3"

  if [[ ! -z "${IMG_BOOT_SIZE}" ]]; then
    umount "${MOUNT_TARGET}/boot" || exit 1
  fi
  umount "${MOUNT_TARGET}/sys" || exit 1
  umount "${MOUNT_TARGET}/proc" || exit 1
  #umount "${MOUNT_TARGET}/dev/pts" || exit 1
  umount "${MOUNT_TARGET}/dev" || exit 1
  umount "${MOUNT_TARGET}" || exit 1
  if [[ ! -z "${IMG_BOOT_SIZE}" ]]; then
    kpartx -d ${DEV_BOOT} || exit 1
  fi
  rmdir "${MOUNT_TARGET}"
fi

exit 0
